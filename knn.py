# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/100Nn1aHv8WD15yDegeHHsl5H8-pTId0M
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.preprocessing import StandardScaler

from sklearn.model_selection import train_test_split

from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import classification_report, confusion_matrix

from google.colab import drive
drive.mount('/content/gdrive')

novas_colunas = ['Classe','Alcohol','Malic acid','Ash',' Alcalinity of ash','Magnesium','Total phenols','Flavanoids','Nonflavanoid phenols','Proanthocyanins','Color intensity','Hue','OD280/OD315 of diluted wines','Proline']

dados=pd.read_csv('wine.data', names= novas_colunas)

dados.head()

dados['Classe'].unique()

dados.info()

dados.columns

len(dados.columns)

escala = StandardScaler()

escala.fit(dados.drop('Classe', axis=1))

dados_normalizado = escala.transform(dados.drop('Classe', axis=1))

dados_normalizado

dados_parametros = pd.DataFrame(dados_normalizado,columns=dados.columns[:-1])

x_treino, x_teste, y_treino, y_teste = train_test_split(dados_parametros, dados['Classe'],test_size=0.3)

knn = KNeighborsClassifier(n_neighbors=1)

knn.fit(x_treino, y_treino)

predicao = knn.predict(x_teste)

print(classification_report(y_teste, predicao))

print(confusion_matrix(y_teste,predicao))

taxa_de_erro = []
for vizinhos in range(1,80):
  knn = KNeighborsClassifier(n_neighbors=vizinhos)
  knn.fit(x_treino, y_treino)
  predicao = knn.predict(x_teste)
  taxa_de_erro.append(np.mean(predicao!=y_teste))

taxa_de_erro

plt.figure(figsize=(8,6))
plt.plot(range(1, 80), taxa_de_erro, marker='o')
plt.xlabel('qtd de k')
plt.ylabel('Taxa de Erro')

knn = KNeighborsClassifier(n_neighbors=14)
knn.fit(x_treino, y_treino)
predicao = knn.predict(x_teste)

print(classification_report(y_teste, predicao))

print(confusion_matrix(y_teste,predicao))

"""Análise da Tabela de vinhos

"""

dados.info()

dados.corr() # correlacão dos dados

sns.heatmap(dados.corr())

#Verificar informações como média, desvio padrão, etc
dados.describe()

#Plotando o Gráfico
sns.distplot(dados['Alcohol'], bins=20)

#Amostra por classe
dados['Classe'].value_counts()

sns.pairplot(dados)